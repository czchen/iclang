#+TITLE: Internet Combinator Language
#+AUTHOR:Hsin-Yi Chen (hychen)
#+OPTIONS: H:2 num:t toc:t
#+OPTIONS: ^:nil
#+OPTIONS: <:nil todo:nil *:t ^:{} @:t ::t |:t TeX:t

#+SETUPFILE:  bigblow-local.setup

* Introduction

Internet Combinator Language, iclang in short, is a cordination language 
which has [[en.wikipedia.org/wiki/Configurable_modularity][configurable modularity]] for compositing things of internet.

It is designed to run on Tim Berners Lee computer.

* Tim Berners Lee Computer

Luca Cardelli 與 Rowan Davies 認為 Internet 上所有電腦可被視為一抽象電腦，
相對於 John von Neumann Unit 模型，並建議稱之為 Tim-Berners Lee 電腦。[1]

隨者時代的演進，不同 Web Services 之間的存取，權限管理介面漸漸一致，因此本文基於前者的想法，
延伸其完整的電腦架構與定義。

由於其極度分散式的架構，資料讀取的特性為

- 並發(concurency)
- 平行(parallelism)
- 有延遲(delay)
- 不一致的值(inconsist)
- 須考慮容錯(High Faliure)

#+TBLNAME: 與 John von Neumann 模型的比較
| John von Neumann Unit | Tim Berners Lee Unit |
|-----------------------+----------------------|
| CPU                   | Processing Unit      |
| Memory                | Hyper Memory         |
| Bus                   | Hyper Bus            |
| Input Device          | Input Service        |
| Output Device         | Ouput Service        |

#+BEGIN_SRC ditaa :file images/tim-berners-lee-computer-arch.png :cmdline -r -E
  +----------------------------+            
  |      Hyper Memory          |
  |        {d}cRED             |
  | o managed web services     |
  | o managed hyper processes  |
  +----------------------------+
               |    
               |    +-----------+      +---------+      
               +--->| Processing|      | Output  |     
                    |    Unit   |<---->| Service |
               +--->|    cYEL   |      |{io}c707 |     
  +--------+   |    +-----------+      +---------+
  | Input  |   |
  | Service|---+
  |{io}cBLU|         ------ Hyper Bus -------
  +--------+         
#+END_SRC

** Hyper Memory

#+BEGIN_SRC ditaa :file images/tim-berners-lee-computer-hyper-memory.png :cmdline -r -E
+-----------------+---------------+   
| Reference(URL)  |    Value      |  | 
|    cYEL         |     cYEL      |  |
+-----------------+---------------+  +-> Allocated Page(Web Service)
| Reference(URL)  |    Value      |  | 
|    cYEL         |     cYEL      |  |
+-----------------+---------------+
| Reference(URL)  | Hyper Process |  |
|    cBLU         |     cBLU      |  +-> Executed Hyper Script  
+-----------------+---------------+  |
         Hyper Memory
#+END_SRC

| John von Neumann Unit | Tim Berners Lee Unit |
|-----------------------+----------------------|
| Memory Page           | Web Service          |
| Memory Address        | URL                  |
| Data                  | Value                |
| Process               | Hyper Process        |

*** Reference

URL 是某種網路上的索引，只是每次讀取得值不總是一致，除此之外讀取還可能會失敗，有延遲。

*** Value
***** Atomic

像是圖檔，影像，音樂等等。

***** Compund 

像是HTML, Markdown, JSON, XML等等。

***** Script

一般的程式語言，像是 JavaScript, CoffeScript 之類的。

***** Hyper Script

Cordination Language, 像是 FBP。

*** Hyper Process

執行中的 Hyper Script，用來讀寫, 轉換 Web Services 的資料之類的操作。

** Processing Unit

Internet 裏的某一台電腦均可當成處理單元，執行 Hyper Script 而其檔案系統跟記憶體可看做成這一抽象電腦的快取。

** Hyper Bus

#+BEGIN_SRC ditaa :file images/tim-berners-lee-computer-hyper-bus.png :cmdline -r -E
+------------+--------+---------+---------+
| Processing | Hyper  | Input   | Output  | |
|   Unit     | Memory | Service | Service | |-> Communicated Units
|   cYEL     | cRED   |  cBLU   |  c707   | |
+---------+--+--------+---------+---------+
| RESTful | WebSocket | Web RTC | OAuth   | |
|  c505   |   c505    |   c505  |  c505   | +-> Hyper Bus           
+---------+-----------+---------+---------+ |                
#+END_SRC

** Input Service

A web service like a shell.

** Output Service

A target service that user want to have.

- production service.
- management service.

* Models
** Static Phase

The control logic is denoted in a json file like abstract syntax tree as below:

#+BEGIN_SRC javascript
  {
      "properties":{
          "name":"The hyper script name"
      },
      "inports":[],
      "exports":[],
      "processes":{
          "the process id":{
              "component":"which componet will be used",
              "options":{
                  "opt1": "the value of option1"
              }
          },
          "second process id":{
              "....":"...."
          }
      },
      "connections:":[
          {
              "data":"data",
              "tgt":{
                  "process":"the process id",
                  "port":"in"
              }
          },
          {
              "src":{
                  "process":"the process id",
                  "port":"out"
              },
              "tgt":{
                  "process":"second process id"
                  "port":"in"
              }
          }
      ]
  }
#+END_SRC

This file is called Hyper Script and represents the following relationships.

#+BEGIN_SRC ditaa :file images/tim-berners-lee-computer-hyper-process.png :cmdline -r -E
                        +--------------------+   +--------------------+
"data" -->  Inport []-->|[]in Process A out[]|-->|[]in Process B out[]|-->[] Export
                        +--------------------+   +--------------------+
                                  ^                       ^
                                  |                       |
                              options A               options B
  
                        -- connection
                        [] port
#+END_SRC

*** Component

Individual, pluggable and reusable piece of software. 

*** Port
    
** Dynamic Phase
*** Information Stream

An entity that packed data, state passed throw the process pipeline.

*** Initial Information Stream

predefined data stream sent to a defined inport of a Process

*** Hyper Process

An instance of a Hyper Script.

*** Process

An instance of a component that is running as part of Hyper Process, to
recive Information Streams and then do someting and then pass to next process.

*** Socket

The place in a process that another process could attach, in order to send or recive information stream.

A process can have mutiple input/output sockets.

*** Connection

connection between an outport of a Process, and inport of another Process
* Models and Calculus Corresponding

[1]: [[http://research.microsoft.com/apps/pubs/default.aspx?id%3D67566][Luca Cardelli and Rowan Davies, 1997, Service Combinators for Web Computing]]
